
services:

  userservice-db:
    image: postgres:16
    container_name: userservice-db
    environment:
      POSTGRES_DB: userservice_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "6601:5432"  # External port starts with 6
    volumes:
      - ./userservice-db-data:/var/lib/postgresql/data
    networks:
      - backend

  productservice-db:
    image: postgres:16
    container_name: productservice-db
    environment:
      POSTGRES_DB: productservice_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "6602:5432"
    volumes:
      - ./productservice-db-data:/var/lib/postgresql/data
    networks:
      - backend

  saleservice-db:
    image: postgres:16
    container_name: saleservice-db
    environment:
      POSTGRES_DB: saleservice_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "6603:5432"
    volumes:
      - ./salesservice-db-data:/var/lib/postgresql/data
    networks:
      - backend
  configserver:
    build:
      context: ./configserver
      dockerfile: Dockerfile
    container_name: configserver
    ports:
      - "8888:8888"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8888"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:9.0.1
    container_name: logstash
    volumes:
      - type: bind
        source: ./elk/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./elk/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - backend
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.1
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTIC_APM_SERVER_URL=http://apm-server:8200
      - ELASTIC_APM_SECRET_TOKEN=xxVpmQB2HMzCL9PgBHVrnxjNXXw5J7bd79DFm6sjBJR5HPXDhcF8MSb3vv4bpg44

    networks:
      - backend
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
  apm-server:
    image: docker.elastic.co/apm/apm-server:9.0.1
    container_name: apm-server
    ports:
      - "8200:8200"
    environment:
      - output.elasticsearch.hosts=["elasticsearch:9200"]
      - apm-server.rum.enabled=true
      - apm.server.kibana.enabled=true
      - setup.kibana.host=http://kibana:5601
      - apm-server.host=0.0.0.0:8200
      - apm-server.secret_token=xxVpmQB2HMzCL9PgBHVrnxjNXXw5J7bd79DFm6sjBJR5HPXDhcF8MSb3vv4bpg44
    networks:
      - backend
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "--write-out", "'HTTP %{http_code}'", "--silent", "--output", "/dev/null", "http://localhost:8200/"]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-server:
    build:
      context: ./servicediscovery
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    networks:
      - backend

  userservice:
    build:
      context: ./userservice
      dockerfile: Dockerfile
    container_name: userservice
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: 'http://eureka-server:8761/eureka'
      SPRING_DATASOURCE_URL: jdbc:postgresql://userservice-db:5432/userservice_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      ELASTIC_APM_SERVICE_NAME: userservice
      ELASTIC_APM_SERVER_URL: http://apm-server:8200
      ELASTIC_APM_SECRET_TOKEN: xxVpmQB2HMzCL9PgBHVrnxjNXXw5J7bd79DFm6sjBJR5HPXDhcF8MSb3vv4bpg44
      ELASTIC_APM_ENVIRONMENT: development
    ports:
      - "8081:8080"
    depends_on:
      - userservice-db
      - configserver
      - eureka-server
      - logstash
    networks:
      - backend

  authservice:
    build:
      context: ./authService
      dockerfile: Dockerfile
    container_name: authservice
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:postgresql://userservice-db:5432/userservice_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      ELASTIC_APM_SERVICE_NAME: authservice
      ELASTIC_APM_SERVER_URL: http://apm-server:8200
      ELASTIC_APM_SECRET_TOKEN: xxVpmQB2HMzCL9PgBHVrnxjNXXw5J7bd79DFm6sjBJR5HPXDhcF8MSb3vv4bpg44
      ELASTIC_APM_ENVIRONMENT: development
    ports:
      - "8084:8080"
    depends_on:
      - configserver
      - userservice-db
      - eureka-server
      - logstash
    networks:
      - backend

  productservice:
    build:
      context: ./productservice
      dockerfile: Dockerfile
    container_name: productservice
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:postgresql://productservice-db:5432/productservice_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_CLOUD_CONFIG_URL: http://configserver:8888
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: user
      RABBITMQ_PASSWORD: password
      ELASTIC_APM_SERVICE_NAME: productservice
      ELASTIC_APM_SERVER_URL: http://apm-server:8200
      ELASTIC_APM_SECRET_TOKEN: xxVpmQB2HMzCL9PgBHVrnxjNXXw5J7bd79DFm6sjBJR5HPXDhcF8MSb3vv4bpg44
      ELASTIC_APM_ENVIRONMENT: development
    ports:
      - "8082:8080"
    depends_on:
      configserver:
        condition: service_healthy
      productservice-db:
        condition: service_started
      eureka-server:
        condition: service_started
      logstash:
        condition: service_started
    networks:
      - backend

  saleservice:
    build:
      context: ./salesservice
      dockerfile: Dockerfile
    container_name: saleservice
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:postgresql://saleservice-db:5432/saleservice_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: user
      RABBITMQ_PASSWORD: password
      ELASTIC_APM_SERVICE_NAME: salesservice
      ELASTIC_APM_SERVER_URL: http://apm-server:8200
      ELASTIC_APM_SECRET_TOKEN: xxVpmQB2HMzCL9PgBHVrnxjNXXw5J7bd79DFm6sjBJR5HPXDhcF8MSb3vv4bpg44
      ELASTIC_APM_ENVIRONMENT: development
#      JAVA_TOOL_OPTIONS: -javaagent:/app/elastic-apm-agent.jar
    ports:
      - "8083:8080"
    depends_on:
      - configserver
      - saleservice-db
      - eureka-server
      - logstash
    networks:
      - backend

  apigateway:
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    container_name: apigateway
    ports:
      - "1001:1001"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      ELASTIC_APM_SERVICE_NAME: apigateway
      ELASTIC_APM_SERVER_URL: http://apm-server:8200
      ELASTIC_APM_SECRET_TOKEN: xxVpmQB2HMzCL9PgBHVrnxjNXXw5J7bd79DFm6sjBJR5HPXDhcF8MSb3vv4bpg44
      ELASTIC_APM_ENVIRONMENT: development
    depends_on:
      - eureka-server
      - userservice
      - productservice
      - saleservice
      - logstash
    networks:
      - backend
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - backend

networks:
  backend:
volumes:
  esdata: